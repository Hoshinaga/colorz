#! /usr/bin/env ruby
# coding: utf-8
# 
# colorz
#   Complex domain coloring
# Usage: colorz [options] FUNCTION
# Options:
#   -i INPUT_FILE
#   -o OUTPUT_FILE
#   -r MIN,MAX
#   -s XxY

require "cmath"
require "chunky_png"
require "rgb"
require "optparse"

include Math

class DomainColoring

  attr_accessor :width, :height,
    :min_r, :min_i, :max_r, :max_i,
    :is_tile

  def initialize(options)
    @width = [options[:width], 1].max
    @height = [options[:height], 1].max
    @min_r, @max_r = min_max(options[:min_r], options[:max_r])
    @min_i, @max_i = min_max(options[:min_i], options[:max_i])
    @is_tile = options[:is_tile]
  end

  def min_max(a, b)
    if a <= b
      [a, b]
    else
      [b, a]
    end
  end
  
  def intensity(r)
    if r == 0
      r
    else
      log_2 = log2(r)
      log_2 -= log_2.floor
    end
  end

  def grid(z)
    real = sin(z.real * PI).abs
    imag = sin(z.imag * PI).abs
    grid = [real, imag].min
    grid = [log(grid) / log(200), -1.0].max
    grid = 1.0 - grid * grid
    
    return grid
  end

  def pulse(x)
    log_sq = [log(sqrt(x)), -1.0].max
    pulse = log_sq*log_sq
    
    return pulse
  end

  def comp_to_hsl(z)
    radius, theta = z.polar
    h = 0.5 * theta / PI
    r = intensity(radius)
    s = sqrt(sqrt(sin(r * PI)))
    l = [0.5 * grid(z) * (2.0 - s) + pulse(s), 1.0].min

    return [h, s, l]
  end

  def complex_function(script)
    extend CMath
    zfunc = eval <<-EOS
      lambda do |z|
        result = #{script}
        result = Complex.rect(0.0, result.imag) if result.real.to_f.nan?
        result = Complex.rect(result.real, 0.0) if result.imag.to_f.nan?
        return result
      end
    EOS
  end
  
  def plot(script)
    zfunc = complex_function(script)

    if @is_tile
      divisor_i = @height
      divisor_r = @width
    else
      divisor_i = @height - 1
      divisor_r = @width - 1
    end
    
    delta_i = (@max_i - @min_i)/[divisor_i, 1.0].max
    delta_r = (@max_r - @min_r)/[divisor_r, 1.0].max
    png = ChunkyPNG::Image.new(@width, @height)
    
    @height.times do |y|
      imag = @max_i - y * delta_i
      @width.times do |x|
        real = @min_r + x * delta_r
        z = Complex.rect(real, imag)
        comp = zfunc.call(z)
        h, s, l = comp_to_hsl(comp)
        r, g, b = RGB::Color.from_fractions(h, s, l).to_rgb
        png[x, y] = ChunkyPNG::Color.rgb(r, g, b)
      end
    end
    
    return png
  end

end #class


class ColorZ

  DEFAULT_WIDTH = 400
  DEFAULT_HEIGHT = 400
  DEFAULT_FUNTION = "z"

  def opt_parse(argv)
    opts = {}
    
    OptionParser.new do |opt|
      begin
        opt.version = '0.1.0'
        opt.banner = "Complex domain coloring\n" + opt.banner
        opt.banner += " FUNCTION"
        opt.separator("\nOptions:")
        
        opt.on('-i=INPUT_FILE', '--input-file',
          'file path of ruby script for a complex function') {|v| opts[:i] = v}
        opt.on('-o=OUTPUT_FILE', '--output-file',
          'file path of output image') {|v| opts[:o] = v}
        opt.on('-r=MIN,MAX', '--range',
          'coloring range (e.g. -r=-2-2i,+2+2i)') {|v| opts[:r] = v}
        opt.on('-s=WxH', '--size',
          'size(width=W, height=H) of the output image') {|v| opts[:s] = v}
        opt.on('-t', '--tile',
          'the right/bottom edge shows slightly inner values than the maximum') {|v| opts[:t] = v}
        
        opt.separator("\nFUNCTION:")
        opt.on('Ruby snipet that returns a value with a given parameter "z"')
        
        opt.parse!(ARGV)
      rescue => e
        $stderr.puts "ERROR: #{e}.\n#{opt}"
        exit
      end
    end
    
    return opts
  end

  def get_size(size)
    if size
      width, height = size.split("x").map {|n| n.to_i}
    else
      width, height = DEFAULT_WIDTH, DEFAULT_HEIGHT
    end
    
    return width, height
  end
  
  def get_range(range)
    if range
      min, max = range.split(",").map {|s| s.to_c} 
      min_r = min.real.to_f
      min_i = min.imag.to_f
      max_r = max.real.to_f
      max_i = max.imag.to_f
    else
      min_r = -4.0
      min_i = -4.0
      max_r = +4.0
      max_i = +4.0
    end
    
    return min_r, min_i, max_r, max_i
  end
  
  def get_output_file(output_file)
    if output_file
      output_file = output_file
    else
      output_file = "colorz.png"
    end
    
    return output_file
  end
  
  def get_script(input_file, oneliner)
    if input_file
      if input_file == "-"
        script = STDIN.read
      else
        script = File.read(input_file)
      end
    else
      script = oneliner
    end
    script = DEFAULT_FUNTION if script.empty?
    
    return script
  end

  def main(argv)
    opts = opt_parse(argv)
    
    width, height = get_size(opts[:s])
    min_r, min_i, max_r, max_i = get_range(opts[:r])
    
    output_file = get_output_file(opts[:o])
    script = get_script(opts[:i], argv.join(" "))
    
    dom_color = DomainColoring.new(
    {
      min_r: min_r,
      min_i: min_i,
      max_r: max_r,
      max_i: max_i,

      width: width,
      height: height,
      
      is_tile: opts[:t]
    })
    png = dom_color.plot(script)
    png.save(output_file)
    
    puts File.expand_path(output_file)
  end # main
  
end # class


#################################

ColorZ.new.main(ARGV)

exit 0

# EOF
